#!/usr/bin/env python3

# synchronize.py: sync workspace Cargo.toml with buck2/reindeer Cargo.toml

import subprocess
import tomllib

# the workspace Cargo.toml file does not allow expressing conditional
# dependencies, but it functions as the source of truth for all version data,
# and if we want to update third-party//rust with correct platform-specific
# dependencies, we need to parse it, then emit a valid version

WINDOWS_DEPS = [ 'winreg' ]
UNIX_DEPS = [ 'rustix' ]

CARGO_TEMPLATE = """# @generated by buck/third-party/rust/synchronize.py
[workspace]

[package]
name = "rust-third-party"
version = "0.0.0"
publish = false
edition = "2021"

# Dummy target to keep Cargo happy
[[bin]]
name = "top"
path = "top.rs"

"""

def format_dep(rhs) -> str:
    # if it's a string, just print it out
    if isinstance(rhs, str):
        return f'"{rhs}"'
    elif isinstance(rhs, bool):
        return f'{str(rhs).lower()}'
    # if it's a list, format it as a toml array
    elif isinstance(rhs, list):
        return f'[ {", ".join([f'"{x}"' for x in rhs])} ]'
    else:
        # format the dict as a toml dict manually
        return "{ " + ", ".join([f'{k} = {format_dep(v)}' for k, v in rhs.items()]) + " }"

def sync_cargo_deps():
    contents = CARGO_TEMPLATE
    with open ("Cargo.toml", "rb") as f:
        # parse the workspace Cargo.toml
        data = tomllib.load(f)
        deps = data["workspace"]["dependencies"]

        # delete jj crates
        for bad in [ "jj-lib", "jj-lib-proc-macros", "testutils" ]:
            if bad in deps:
                del deps[bad]

        contents += "[dependencies]\n"
        for x, v in deps.items():
            # some crates are only for one platform; we need to remove them and
            # handle it below
            if x in WINDOWS_DEPS or x in UNIX_DEPS:
                continue
            contents += f'{x} = {format_dep(v)}\n'

        contents += ("\n[target.'cfg(unix)'.dependencies]\n")
        for x in UNIX_DEPS:
            contents += f'{x} = {format_dep(deps[x])}\n'

        contents += ("\n[target.'cfg(windows)'.dependencies]\n")
        for x in WINDOWS_DEPS:
            contents += f'{x} = {format_dep(deps[x])}\n'

    # now write the contents to buck/third-party/rust/Cargo.toml
    print("Writing new buck/third-party/rust/Cargo.toml")
    with open("buck/third-party/rust/Cargo.toml", "w") as f:
        f.write(contents)

    # now run reindeer
    print("Now running 'reindeer' to regenerate BUILD files")
    cmd = [
        "./tools/bin/reindeer",
        "--third-party-dir",
        "buck/third-party/rust",
        "buckify",
    ]
    subprocess.run(cmd, check=True)

    # Now run 'buck2 build' to make sure everything is up to date
    print("Now running 'buck2 build' to make sure everything works")
    cmd = [
        "buck2",
        "build",
        "@mode//debug",
        "third-party//rust",
    ]
    subprocess.run(cmd, check=True)

if __name__ == "__main__":
    sync_cargo_deps()
